-- PARA SELECCIONAR TODAS LAS COLUMNAS DE UNA TABLA USAMOS EL COMANDO SELECT SEGUIDO DE *
/*
SELECT * FROM CURSOS
*/

-- QUE SERIA LO MISMO QUE SELECCIONAR TODAS LAS COLUMNAS POR SEPARADO
-- LAS COLUMNAS QUE QUQERRAMOS CONSULTAR DEBEN ESTAR SEPARADAS POR UNA COMA

-- SELECT ID_CURSO, TITULO_CURSO, DURACION_HORAS, ID_PROFESOR, ID_TIPO, ID_IDIOMA, ID_NIVEL, ID_RAMA FROM CURSOS


-- SI SABEMOS QUE PEUDEN EXISTIR VALORES DUPLICADO EN LA BASE USAMOS EL COMANDO DISTINCT
-- DE ESTA FORMA SOLO NOS TRAERA LA COLUMNA SELECCIONADA CON LOS VALORES SIN REPETIR

/*
SELECT DISTINCT (ID_RAMA) FROM CURSOS
SELECT DISTINCT (ID_TIPO) FROM CURSOS
SELECT DISTINCT (ID_PROFESOR) FROM CURSOS
*/

-- CON LA SENENCIA ORDER BY ORDDENAMOS LODATOS SEGUN UNA O VARIAS COLUMNAS, DE MANERA ASECENDENTE O DESCENDENTE
-- POR DEFECTO LO ORDENA DE MANERA ASCENDENTE, SI QUEREMOS LO CONTRARIO DEBEMOS AGREGAR AL FINAL DE LA SENETNCIA (DESC)


/*
SELECT * FROM CURSOS
ORDER BY TITULO_CURSO

SELECT * FROM CURSOS
ORDER BY ID_PROFESOR

SELECT * FROM CURSOS
ORDER BY ID_TIPO
*/

-- A SU VEZ PODEMOS ORDENAR POR DIFERENTES CATEGORIAS, ES DECIR PODEMOS ORDENAR POR ID DE PROFESOR Y LUEGO ORDENAR POR TIPO DE CURSO
-- ESTO NO PERMITIRA TENER ORDENADO CADA PROFESOR CON SU TIPO DE CURSO, ESTO DEBEN ESTAR SEPARADO POR UNA COMA

/*
SELECT * FROM CURSOS
ORDER BY TITULO_CURSO, ID_PROFESOR, ID_TIPO
*/


-- LA SENTENCIA WHERE EMPEZAREMOS A USAR LOS OPEADORES DE COMPARACION 
-- NOS SERVIRAN PARA PEDIR EN LA CONSULTA QUE NOS TRAIGA LA TABLA X CON LAS DATOS QUE COINCIDAN CON LA CONDICION

/*
SELECT * FROM CURSOS 
WHERE ID_NIVEL = 'N03'
*/

-- SE PUEDEN CONCATENAR CONDICIONES USANDO LOS OPERADORES LOGICOS AND / OR / AND NOT (ESTOS VAN JUNTOS)
-- CON EL OPERADOR AND AMBAS CONDICOONES DEBEN CUMPLIRSE DE LO CONTRARIO LA CONSULTA REGRESA VACIA
-- CON EL OR, SOLO UNA DE LAS CONDICIONES DEBE SER VERDADERA
-- EN EL EJEMPLO DEL OR EL NIVEL NO EXISTE PERO EL IDIAMA SI POR ESO NO DA ERROR
-- NOT SACA EL REGISTRO QUE LE HAYAMOS INDICADO

/*
SELECT * FROM CURSOS 
WHERE ID_NIVEL = 'N03' AND ID_IDIOMA = 'LANG01'


SELECT * FROM CURSOS 
WHERE ID_NIVEL = 'N030' OR ID_IDIOMA = 'LANG01'

SELECT * FROM CURSOS 
WHERE ID_NIVEL = 'N030' AND NOT  ID_IDIOMA = 'LANG01'

*/

-- SE PUEDEN ENCADENAR MAS DE UN AND EN LA CONSULTA

/*
SELECT * FROM CURSOS 
WHERE ID_NIVEL = 'N03' AND ID_IDIOMA = 'LANG01' AND ID_TIPO = 'TP02'
*/

-- LOS OPERADOIRES DE COMPARACION 
-- = IGUAL QUE , != DISTINTE QUE, < MENOR QUE, <= MENOR IGUAL QUE, > MAYOR QUE, >= MAYOR IGUAL QUE

-- MENOR Y MENOR IGUAL QUE

/*
SELECT * FROM CURSOS
WHERE DURACION_HORAS < 3

SELECT * FROM CURSOS
WHERE DURACION_HORAS <= 3
*/

-- MAYOR Y MAYOR IGUAL QUE

/*
SELECT * FROM CURSOS
WHERE DURACION_HORAS > 3

SELECT * FROM CURSOS
WHERE DURACION_HORAS >= 3
*/

-- IGUAL Y DISTINTO

/*
SELECT * FROM CURSOS 
WHERE ID_NIVEL = 'N03'

SELECT * FROM CURSOS 
WHERE ID_NIVEL != 'N03'
*/

-- HASTA AHORA PODEMOS COMBINAR TODO
/*
SELECT * FROM CURSOS
WHERE DURACION_HORAS >= 3
AND ID_IDIOMA = 'LANG01'
ORDER BY ID_CURSO, ID_PROFESOR

SELECT * FROM CURSOS
WHERE DURACION_HORAS < 3
AND ID_IDIOMA != 'LANG01'
ORDER BY ID_CURSO
*/

-- OPERDOR IN ES UN ABREVIATURA DE MULTIPLES CONDICIONES OR
/*
SELECT * FROM CURSOS
WHERE DURACION_HORAS IN (2,3,4)

-- SE PUEDE COMBINAR IN CON AND

SELECT * FROM CURSOS
WHERE DURACION_HORAS IN (2,3,4)
AND ID_RAMA IN ('RC01', 'RC02')

-- SE PUEDE CONVINAR TAMBIEN CON NOT
SELECT * FROM CURSOS
WHERE DURACION_HORAS NOT IN (2,3,4)
AND ID_RAMA IN ('RC01', 'RC02')
*/

-- OPERADOR BETWEEN SE USA PARA SELECCIONAR VALORES DENTRO DE UN RANGO DADO
-- LUEGO DEL WHERE Y LA COLUMNA SE ESCRIBE BETWEEN X AND X 
-- SI EXISTE UNA CONSULTA ADICIONAL DENTRO DEL WHERE SE DEBE ENCERAR DENTRO DE PARENTESIS

/*
SELECT * FROM CURSOS
WHERE DURACION_HORAS BETWEEN 1 AND 4

-- SE PUEDE COMBINAR CON EL OPERADOR AND

SELECT * FROM CURSOS
WHERE (DURACION_HORAS BETWEEN 1 AND 4) AND ID_TIPO = 'TP02'

-- TAMBIEN SE PUEDE COMBINAR CON EL OPERAR NOT

SELECT * FROM CURSOS
WHERE DURACION_HORAS NOT BETWEEN 1 AND 4
*/

-- OPERADOR LIKE SE UTLIZA CON LA CLAUSULA WHERE PARA BUSCAR UN PATRON EN ESPECIFICO

/*
-- DE ESTA FORMA BUSCA UN VALOR QUE EMPIECE POR EL CARACTER ESPECIFICADO 'A%'
SELECT * FROM ESTUDIANTES
WHERE NOMBRE LIKE 'A%'

-- DE ESTA FORMA BUSCA UN VALOR QUE TERMINE POR EL CARACTER ESPECIFICADO '%A'

SELECT * FROM ESTUDIANTES
WHERE NOMBRE LIKE '%A'

-- SE PUEDE CONVINAR CON EL OPERADOR AND

SELECT * FROM ESTUDIANTES
WHERE NOMBRE LIKE 'A%' AND APELLIDO LIKE '%A'

-- SE PUEDE CONVINAR CON EL OPERADOR OR

SELECT * FROM ESTUDIANTES
WHERE NOMBRE LIKE 'A%' OR APELLIDO LIKE 'N%'

-- DE ESTA FORMA SE BUSCA EL PATRON DE CARATERES EN CUALQUIER POSICION '%JA%'
-- DEBEN SER CARATERES SEGUIDOS, UN TROZO O UNA PALABRA COMPLETA


SELECT * FROM ESTUDIANTES
WHERE NOMBRE LIKE '%DRA%'

SELECT * FROM CURSOS
WHERE TITULO_CURSO LIKE '%PYTHON%'

-- SI QUEREMOS BUCAR POR LA PRIMERA LETRA Y LA ULTIMA SE USA ASI 'A%N'

SELECT * FROM ESTUDIANTES
WHERE NOMBRE LIKE 'A%N' */


-- SENTENCIAS DE UNION DE TABLAS
-- INNER JOIN / LEFT JOIN / RIGTH JOIN
-- EN TODOS LO SCASO LAS TABLAS DEBEN TENER UNA LLAVE EN COMUN PK FK PARA PODER HACER LA UNION


-- INNER JOIN UNO DOS TABLAS SOLO CON LO VALORES QUE EXISTEN EN AMBAS TABLAS Y GENERA UN ATABLA NUEVA CON LSO REGISTROS ENCONTRADOS
-- SELECCIONAMOS LA TABLA 1 SEGUIDO DE LA SENTENCIA INNER JOIN TABLA 2 OPERADON 'ON' 
-- ENTRE PARENTESIS TABLA1.RELACION = TABLA2.RELACION
/*
SELECT * FROM CURSOS
INNER JOIN IDIOMAS ON (CURSOS.ID_IDIOMA = IDIOMAS.ID_IDIOMA)

--CONSULTA MAS PULIDA, USANDO LA NOTACION DE PUNTO SOBRE LA TABLA2 PODENOS ESPECIFICAR QUE CAMPO ES EL QUE QUEREMOS VER EN LA CONSULTA NUEVA

SELECT TITULO_CURSO, DURACION_HORAS, IDIOMAS.IDIOMA FROM CURSOS
INNER JOIN IDIOMAS ON (CURSOS.ID_IDIOMA = IDIOMAS.ID_IDIOMA)


SELECT * FROM COMPRAS
INNER JOIN ESTUDIANTES ON (COMPRAS.ID_ESTUDIANTE = ESTUDIANTES.ID_ESTUDIANTE)

SELECT ID_COMPRA, FECHA_COMPRA, ID_CURSO,  ESTUDIANTES.NOMBRE, ESTUDIANTES.APELLIDO FROM COMPRAS
INNER JOIN ESTUDIANTES ON (COMPRAS.ID_ESTUDIANTE = ESTUDIANTES.ID_ESTUDIANTE)
*/


-- RIGHT JOIN LA INVERSA DEL LEFT, PERMANECEN LOS DOATOS DE LA TABLA 2 QUE NO SE ENCUENTRAN EN LA TABLA 1
-- LA UNION PUEDE SER CON CUALQUIER VALOR QUE SE REPITA EN AMBAS TABLAS, EN ESTE CASO CRUZAMOS LOS APELLIDOS

/*
SELECT ID_PROFESOR, PROFESORES.NOMBRE, PROFESORES.APELLIDO, ESTUDIANTES.ID_ESTUDIANTE, ESTUDIANTES.NOMBRE, ESTUDIANTES.APELLIDO FROM PROFESORES
RIGHT JOIN  ESTUDIANTES ON (PROFESORES.APELLIDO = ESTUDIANTES.APELLIDO)
ORDER BY ID_ESTUDIANTE
*/

-- LEFT JOIN FUNCIONA SIMILAR SOLO QUE LO DATOS DE LA TABLA DE LA IZQUIERDA (1) AL UNIRSE CON LA TABLA DERECHA CONSERVA LOS DATOS QUE NO ESTAN EN ESA TABLA LE ASIGNA VALOR NULL

/*
SELECT * FROM PROFESORES
LEFT JOIN CURSOS ON (PROFESORES.ID_PROFESOR = CURSOS.ID_PROFESOR)
ORDER BY PROFESORES.ID_PROFESOR

*/


-- FUNCIONES DE AGREGACION COUNT / SUM / AVG / MIN / MAX ESTAS FUNCIONES VAN INMEDIATAMENTE DESPUES DEL SELECT 
-- LA FUNCION ROUND TIENE DOS PARAMETROS, EL NUMERO U OPERACION CON NUMEROS FLOTANTES SEPARADOS POR COMA Y EL NUMERO DE DECIMALES QUE QUEREMOS MOSTRAR


-- SUM SUMA EL TOTAL DE LOS LOS VALORES 
/*
SELECT ROUND(SUM(DURACION_HORAS),1) AS TOTAL_HORAS FROM CURSOS
WHERE TITULO_CURSO LIKE ('%CSS%')
*/

-- CONT CUENTA CUANTOS REGISTROS HAY EN UNA TABLA

/*
SELECT COUNT(*) FROM ESTUDIANTES
SELECT COUNT(*) FROM PROFESORES
*/

-- AVG NOS DA UN PROMEDIO DE COLUMNAS CON DATOS NUMERICOS
/*
SELECT ROUND(AVG(DURACION_HORAS),2) AS PROMEDIO_HORAS FROM CURSOS

--MAX Y MIN, COMO SU NOMBRE NOS DICE NOS DEVUELVE EL VALKOR MAXIMO O MINIMO DE LA COLUMNA SELECCIONADA


SELECT MAX(PRECIO) FROM COMPRAS

-- LE SUME WHERE PARA DESCARTAR LOS QUE SON GRATIS
SELECT MIN(PRECIO) FROM COMPRAS
WHERE PRECIO != 0
*/

-- SENTENCIA GRUOP BY 
/*
SELECT ID_COMPRA,FECHA_COMPRA,PRECIO, E.NOMBRE, E.APELLIDO, SUM(PRECIO) FROM COMPRAS AS C
INNER JOIN ESTUDIANTES AS E ON (C.ID_ESTUDIANTE = E.ID_ESTUDIANTE)
GROUP BY ID_COMPRA,FECHA_COMPRA,PRECIO, E.NOMBRE, E.APELLIDO
*/

-- SENTENCIA HAVING AGREGA FUNCIONES DE AGREGACION COMO SI FUESE UN WHERE VA DESPUES DEL GRUPO BY Y ANTES DEL ORDER BY

SELECT ID_COMPRA, FECHA_COMPRA, ID_ESTUDIANTE,  SUM(PRECIO) AS TOTAL FROM COMPRAS
GROUP BY ID_COMPRA, FECHA_COMPRA, ID_ESTUDIANTE
HAVING SUM(PRECIO) > 100
ORDER BY ID_ESTUDIANTE

